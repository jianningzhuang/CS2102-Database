download cryptopp-master from github
download cryptopp-cmake-master from github
copy CMakeLists.txt and cryptopp-config.cmake from cryptopp-cmake to cryptopp

install cygwin64
add g++, cmake, make. gdb

cryptopp settings -> Build, Execution, Deployment -> Toolchains

add cygwin and use as default
CMake: C:\cygwin64\bin\cmake.exe
Build Tool: C:\cygwin64\bin\make.exe
C++ Compiler: C:\cygwin64\bin\g++.exe

-> CMake

+ Release-Cygwin
Name: Release Cygwin
Build type: Release
Toolchain: Cygwin
Generator: Unix Makefiles
CMake options: -G "Unix Makefiles" -DDISABLE_ASM=OFF (from cryptopp cmake)
Build directory: C:\Users\z50022943\Desktop\cryptopp-master
Build options: -- -j 3

Tools->CMake
unload CMake project

go to Makefile
clean and load

cryptopp settings -> Build, Execution, Deployment -> Makefile
Build options: --jobs=3

dropdown beside run button
edit configuration
+Makefile Application
cryptest.exe target and executable
build



include as library

create Library directory in Desktop
create cryptopp directory
create lib and include directory

copy .a file into lib
copy .h files into include


new clion executable cryptoppfam
add cmake directory
add FindCryptopp.cmake file

# The places to look for the tinyxml2 folders
set(FIND_CRYPTOPP_PATHS
        C:/Users/z50022943/Desktop/Libraries/cryptopp                               # On Windows, this is where my tinyxml2 folder is
        )

# The location of the include folder (and thus the header files)
# find_path uses the paths we defined above as places to look
# Saves the location of the header files in a variable called TINYXML2_INCLUDE_DIR
find_path(CRYPTOPP_INCLUDE_DIR 3way.h
        adler32.h
        adv_simd.h
        aes.h
        aes_armv4.h
        algebra.h
        algparam.h
        allocate.h
        arc4.h
        argnames.h
        aria.h
        arm_simd.h
        asn.h
        authenc.h
        base32.h
        base64.h
        basecode.h
        bench.h
        blake2.h
        blowfish.h
        blumshub.h
        camellia.h
        cast.h
        cbcmac.h
        ccm.h
        chacha.h
        chachapoly.h
        cham.h
        channels.h
        cmac.h
        config.h
        config_align.h
        config_asm.h
        config_cpu.h
        config_cxx.h
        config_dll.h
        config_int.h
        config_misc.h
        config_ns.h
        config_os.h
        config_ver.h
        cpu.h
        crc.h
        cryptlib.h
        darn.h
        default.h
        des.h
        dh.h
        dh2.h
        dll.h
        dmac.h
        donna.h
        donna_32.h
        donna_64.h
        donna_sse.h
        drbg.h
        dsa.h
        eax.h
        ec2n.h
        eccrypto.h
        ecp.h
        ecpoint.h
        elgamal.h
        emsa2.h
        eprecomp.h
        esign.h
        factory.h
        fhmqv.h
        files.h
        filters.h
        fips140.h
        fltrimpl.h
        gcm.h
        gf256.h
        gf2n.h
        gf2_32.h
        gfpcrypt.h
        gost.h
        gzip.h
        hashfwd.h
        hc128.h
        hc256.h
        hex.h
        hight.h
        hkdf.h
        hmac.h
        hmqv.h
        hrtimer.h
        ida.h
        idea.h
        integer.h
        iterhash.h
        kalyna.h
        keccak.h
        lea.h
        lsh.h
        lubyrack.h
        luc.h
        mars.h
        md2.h
        md4.h
        md5.h
        mdc.h
        mersenne.h
        misc.h
        modarith.h
        modes.h
        modexppc.h
        mqueue.h
        mqv.h
        naclite.h
        nbtheory.h
        nr.h
        oaep.h
        oids.h
        osrng.h
        ossig.h
        padlkrng.h
        panama.h
        pch.h
        pkcspad.h
        poly1305.h
        polynomi.h
        ppc_simd.h
        pssr.h
        pubkey.h
        pwdbased.h
        queue.h
        rabbit.h
        rabin.h
        randpool.h
        rc2.h
        rc5.h
        rc6.h
        rdrand.h
        resource.h
        rijndael.h
        ripemd.h
        rng.h
        rsa.h
        rw.h
        safer.h
        salsa.h
        scrypt.h
        seal.h
        secblock.h
        secblockfwd.h
        seckey.h
        seed.h
        serpent.h
        serpentp.h
        sha.h
        sha1_armv4.h
        sha256_armv4.h
        sha3.h
        sha512_armv4.h
        shacal2.h
        shake.h
        shark.h
        simeck.h
        simon.h
        simple.h
        siphash.h
        skipjack.h
        sm3.h
        sm4.h
        smartptr.h
        sosemanuk.h
        speck.h
        square.h
        stdcpp.h
        strciphr.h
        tea.h
        threefish.h
        tiger.h
        trap.h
        trunhash.h
        ttmac.h
        tweetnacl.h
        twofish.h
        validate.h
        vmac.h
        wake.h
        whrlpool.h
        words.h
        xed25519.h
        xtr.h
        xtrcrypt.h
        xts.h
        zdeflate.h
        zinflate.h
        zlib.h
        PATH_SUFFIXES include
        PATHS ${FIND_CRYPTOPP_PATHS})

# The location of the lib folder (and thus the .a file)
# find_library uses the paths we defined above as places to look
# Saves the location of the .a file in a variable called TINYXML2_LIBRARY
find_library(CRYPTOPP_LIBRARY               # The variable to store where it found the .a files
        NAMES cryptopp                     # The name of the .a file (without the extension and without the 'lib')
        PATH_SUFFIXES lib                   # The folder the .a file is in
        PATHS ${FIND_CRYPTOPP_PATHS})               # Where to look (defined above)

edit CMakeList.txt to:
cmake_minimum_required(VERSION 3.20)
project(cryptoppfam)

set(CMAKE_CXX_STANDARD 14)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

add_executable(cryptoppfam main.cpp)

include(FindPkgConfig)
find_package(Cryptopp REQUIRED)
include_directories(${CRYPTOPP_INCLUDE_DIR})
target_link_libraries(${PROJECT_NAME} ${CRYPTOPP_LIBRARY})

edit main.cpp to include code

should be able to run

